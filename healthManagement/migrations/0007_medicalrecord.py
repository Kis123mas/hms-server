# Generated by Django 5.2.3 on 2025-10-27 10:48

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('healthManagement', '0006_vitalsign'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='MedicalRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('diagnosis', models.CharField(help_text='Primary diagnosis or condition', max_length=255)),
                ('diagnosis_code', models.CharField(blank=True, help_text='ICD-10 code if available', max_length=20, null=True)),
                ('symptoms', models.TextField(help_text="Patient's reported symptoms")),
                ('examination_findings', models.TextField(blank=True, help_text="Doctor's examination findings", null=True)),
                ('doctor_notes', models.TextField(blank=True, help_text='Detailed clinical notes', null=True)),
                ('treatment_plan', models.TextField(blank=True, help_text='Prescribed treatment and management plan', null=True)),
                ('severity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('severe', 'Severe'), ('critical', 'Critical')], default='moderate', help_text='Severity of the condition', max_length=20)),
                ('status', models.CharField(choices=[('active', 'Active'), ('resolved', 'Resolved'), ('chronic', 'Chronic'), ('follow_up', 'Needs Follow-up')], default='active', help_text='Current status of the medical condition', max_length=20)),
                ('is_resolved', models.BooleanField(default=False, help_text='Check if the condition has been resolved')),
                ('resolved_date', models.DateField(blank=True, help_text='Date when the condition was resolved', null=True)),
                ('follow_up_date', models.DateField(blank=True, help_text='Next follow-up date if needed', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('appointment', models.ForeignKey(blank=True, help_text='Related appointment if applicable', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to='healthManagement.appointment')),
                ('doctor', models.ForeignKey(blank=True, limit_choices_to={'role__name': 'doctor'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='treated_patients', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(limit_choices_to={'role__name': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='medical_records', to=settings.AUTH_USER_MODEL)),
                ('vital_signs', models.ForeignKey(blank=True, help_text='Vital signs recorded during this visit', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='medical_records', to='healthManagement.vitalsign')),
            ],
            options={
                'verbose_name': 'Medical Record',
                'verbose_name_plural': 'Medical Records',
                'ordering': ['-created_at'],
            },
        ),
    ]
