# Generated by Django 5.2.3 on 2025-10-22 08:11

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActiveWebSocketConnection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('connected_at', models.DateTimeField(auto_now_add=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-connected_at'],
            },
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Drug',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('generic_name', models.CharField(blank=True, max_length=100)),
                ('description', models.TextField(blank=True)),
                ('category', models.CharField(choices=[('ANTIBIOTIC', 'Antibiotic'), ('ANALGESIC', 'Pain Reliever'), ('ANTIHYPERTENSIVE', 'Blood Pressure'), ('ANTIDIABETIC', 'Diabetes'), ('OTHER', 'Other')], max_length=50)),
                ('dosage_form', models.CharField(max_length=50)),
                ('strength', models.CharField(max_length=50)),
                ('manufacturer', models.CharField(blank=True, max_length=100)),
                ('barcode', models.CharField(blank=True, max_length=50, null=True, unique=True)),
                ('current_quantity', models.PositiveIntegerField(default=0)),
                ('minimum_stock', models.PositiveIntegerField(default=10)),
                ('unit_of_measure', models.CharField(default='units', max_length=20)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('selling_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('ndc_code', models.CharField(blank=True, max_length=20)),
                ('expiry_date', models.DateField(blank=True, null=True)),
                ('last_restocked', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Drug Inventory',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Ward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='PatientEMR',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3)),
                ('height', models.PositiveSmallIntegerField(blank=True, help_text='Height in cm', null=True)),
                ('weight', models.DecimalField(blank=True, decimal_places=2, help_text='Weight in kg', max_digits=5, null=True)),
                ('birth_date', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('M', 'Male'), ('F', 'Female'), ('O', 'Other'), ('U', 'Undisclosed')], max_length=1)),
                ('last_blood_pressure', models.CharField(blank=True, help_text="Format: '120/80'", max_length=7)),
                ('last_blood_sugar', models.DecimalField(blank=True, decimal_places=1, help_text='Fasting glucose in mg/dL', max_digits=4, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(limit_choices_to={'role__name': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='patient_emr', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Electronic Medical Record',
                'verbose_name_plural': 'Electronic Medical Records',
            },
        ),
        migrations.CreateModel(
            name='PatientVital',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('blood_pressure_systolic', models.PositiveSmallIntegerField(verbose_name='Systolic BP (mmHg)')),
                ('blood_pressure_diastolic', models.PositiveSmallIntegerField(verbose_name='Diastolic BP (mmHg)')),
                ('heart_rate', models.PositiveSmallIntegerField(verbose_name='Heart Rate (bpm)')),
                ('temperature', models.DecimalField(decimal_places=1, max_digits=3, verbose_name='Temperature (Â°C)')),
                ('oxygen_saturation', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='SpO2 (%)')),
                ('respiratory_rate', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Respiratory Rate (breaths/min)')),
                ('measurement_context', models.CharField(choices=[('RESTING', 'Resting'), ('POST_EXERCISE', 'Post-Exercise'), ('FASTING', 'Fasting'), ('POST_PRANDIAL', 'After Meal')], default='RESTING', max_length=20)),
                ('notes', models.TextField(blank=True)),
                ('recorded_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('patient', models.ForeignKey(limit_choices_to={'role__name': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='patient_vitals', to=settings.AUTH_USER_MODEL)),
                ('recorded_by', models.ForeignKey(blank=True, limit_choices_to={'role__name__in': ['doctor', 'nurse']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_vitals', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Patient Vital Signs',
                'verbose_name_plural': 'Patient Vital Signs Records',
                'ordering': ['-recorded_at'],
                'permissions': [('view_all_vitals', 'Can view all patients vitals')],
            },
        ),
        migrations.CreateModel(
            name='Prescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('instructions', models.TextField()),
                ('piad', models.BooleanField(default=False)),
                ('is_dispensed', models.BooleanField(default=False, verbose_name='Pharmacy Dispensed')),
                ('is_collected', models.BooleanField(default=False, verbose_name='Patient Collected')),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('issued_at', models.DateTimeField(blank=True, null=True)),
                ('dispensed_at', models.DateTimeField(blank=True, null=True)),
                ('collected_at', models.DateTimeField(blank=True, null=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(limit_choices_to={'role__name': 'doctor'}, on_delete=django.db.models.deletion.PROTECT, related_name='doctor_prescriptions', to=settings.AUTH_USER_MODEL)),
                ('medications', models.ManyToManyField(blank=True, help_text='Medications prescribed', related_name='prescriptions', to='healthManagement.drug')),
                ('patient', models.ForeignKey(limit_choices_to={'role__name': 'patient'}, on_delete=django.db.models.deletion.PROTECT, related_name='patient_prescriptions', to=settings.AUTH_USER_MODEL)),
                ('pharmacist', models.ForeignKey(blank=True, limit_choices_to={'role__name': 'pharmacist'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='pharmacist_dispensations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
                'permissions': [('can_dispense', 'Can mark prescription as dispensed'), ('can_collect', 'Can mark prescription as collected')],
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.TextField(blank=True, null=True)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('gender', models.CharField(blank=True, choices=[('male', 'Male'), ('female', 'Female'), ('other', 'Other')], max_length=10, null=True)),
                ('marital_status', models.CharField(blank=True, choices=[('single', 'Single'), ('married', 'Married'), ('divorced', 'Divorced'), ('widowed', 'Widowed')], max_length=20, null=True)),
                ('blood_group', models.CharField(blank=True, choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=3, null=True)),
                ('genotype', models.CharField(blank=True, choices=[('AA', 'AA'), ('AS', 'AS'), ('SS', 'SS'), ('AC', 'AC'), ('SC', 'SC'), ('CC', 'CC')], help_text='Genetic blood composition', max_length=5, null=True)),
                ('national_id', models.CharField(blank=True, max_length=30, null=True)),
                ('emergency_contact', models.CharField(blank=True, max_length=50, null=True)),
                ('next_of_kin', models.CharField(blank=True, max_length=100, null=True)),
                ('relationship_to_next_of_kin', models.CharField(blank=True, max_length=50, null=True)),
                ('profile_picture', models.ImageField(blank=True, null=True, upload_to='profile_pics/')),
                ('document_1', models.FileField(blank=True, null=True, upload_to='profile_documents/')),
                ('document_2', models.FileField(blank=True, null=True, upload_to='profile_documents/')),
                ('document_3', models.FileField(blank=True, null=True, upload_to='profile_documents/')),
                ('document_4', models.FileField(blank=True, null=True, upload_to='profile_documents/')),
                ('specialization', models.CharField(blank=True, max_length=100, null=True)),
                ('license_number', models.CharField(blank=True, max_length=50, null=True)),
                ('employment_date', models.DateField(blank=True, null=True)),
                ('qualification', models.CharField(blank=True, max_length=200, null=True)),
                ('bio', models.TextField(blank=True, null=True)),
                ('is_admitted', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='profiles', to='healthManagement.department')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('test_name', models.CharField(max_length=100)),
                ('test_code', models.CharField(max_length=20)),
                ('request_date', models.DateTimeField(auto_now_add=True)),
                ('collection_date', models.DateTimeField(blank=True, null=True)),
                ('processing_date', models.DateTimeField(blank=True, null=True)),
                ('completion_date', models.DateTimeField(blank=True, null=True)),
                ('results', models.JSONField(default=dict, help_text='Structured test results data')),
                ('reference_ranges', models.JSONField(blank=True, help_text='Normal reference ranges', null=True)),
                ('abnormal_flags', models.JSONField(blank=True, help_text='Abnormal result indicators', null=True)),
                ('report_file', models.FileField(blank=True, null=True, upload_to='test_reports/%Y/%m/%d/')),
                ('raw_data_files', models.JSONField(blank=True, help_text='Array of raw data file paths', null=True)),
                ('clinical_notes', models.TextField(blank=True, null=True)),
                ('interpretation', models.TextField(blank=True, null=True)),
                ('recommendations', models.TextField(blank=True, null=True)),
                ('patient', models.ForeignKey(limit_choices_to={'role__name': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='patient_tests', to=settings.AUTH_USER_MODEL)),
                ('performed_by', models.ForeignKey(blank=True, limit_choices_to={'role__name': 'labtech'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='performed_tests', to=settings.AUTH_USER_MODEL)),
                ('requesting_doctor', models.ForeignKey(blank=True, limit_choices_to={'role__name': 'doctor'}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='requested_tests', to=settings.AUTH_USER_MODEL)),
                ('verified_by', models.ForeignKey(blank=True, limit_choices_to={'role__name__in': ['doctor', 'labtech']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='verified_tests', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-request_date'],
                'permissions': [('can_process_test', 'Can process lab tests'), ('can_verify_test', 'Can verify test results')],
            },
        ),
        migrations.CreateModel(
            name='VerificationCode',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=6)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(max_length=10)),
                ('bed_count', models.PositiveIntegerField()),
                ('ward', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rooms', to='healthManagement.ward')),
            ],
            options={
                'unique_together': {('ward', 'number')},
            },
        ),
        migrations.CreateModel(
            name='Appointment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('appointment_id', models.UUIDField(blank=True, default=uuid.uuid4, editable=False, help_text='Unique identifier for the appointment', null=True, unique=True)),
                ('is_patient_available', models.BooleanField(default=False)),
                ('is_vitals_taken', models.BooleanField(default=False)),
                ('is_doctor_done_with_patient', models.BooleanField(default=False)),
                ('patient_reason_for_appointment', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('cancelled', 'Cancelled'), ('completed', 'Completed')], default='pending', max_length=20)),
                ('appointment_date', models.DateTimeField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor', models.ForeignKey(limit_choices_to={'role__name': 'doctor'}, on_delete=django.db.models.deletion.CASCADE, related_name='doctor_appointments', to=settings.AUTH_USER_MODEL)),
                ('nurse', models.ForeignKey(blank=True, limit_choices_to={'role__name': 'nurse'}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='nurse_appointment_vitals', to=settings.AUTH_USER_MODEL)),
                ('patient', models.ForeignKey(limit_choices_to={'role__name': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='patient_appointments', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-appointment_date'],
                'unique_together': {('doctor', 'appointment_date')},
            },
        ),
        migrations.CreateModel(
            name='AllocateBed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bed_number', models.CharField(max_length=10)),
                ('is_occupied', models.BooleanField(default=False)),
                ('allocated_at', models.DateTimeField(auto_now_add=True)),
                ('allocated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='beds_allocated', to=settings.AUTH_USER_MODEL)),
                ('allocated_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='allocated_beds', to=settings.AUTH_USER_MODEL)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='beds', to='healthManagement.room')),
            ],
            options={
                'constraints': [models.UniqueConstraint(condition=models.Q(('is_occupied', True)), fields=('allocated_to',), name='unique_patient_allocation')],
                'unique_together': {('room', 'bed_number')},
            },
        ),
    ]
